{"version":3,"sources":["utils/searchHelper.ts","components/SearchLink.tsx","components/PeopleFilters.tsx","components/Loader/Loader.tsx","components/PeopleTable.tsx","api.ts","components/PeoplePage.tsx","components/Navbar.tsx","App.tsx","index.tsx"],"names":["getSearchWith","currentParams","paramsToUpdate","newParams","URLSearchParams","toString","Object","entries","forEach","key","value","delete","Array","isArray","part","append","set","SearchLink","children","params","props","useSearchParams","searchParams","to","search","centuriesForFiltering","PeopleFilters","setSearchParams","centuries","getAll","sex","get","query","onToggleCenturies","century","includes","filter","centuryNew","className","classNames","type","onChange","event","setSearchWith","target","placeholder","map","Loader","sortFields","PeopleTable","people","personSlug","useParams","sortField","sortOrder","field","newSortField","person","mother","find","name","motherName","father","fatherName","slug","born","died","API_URL","wait","delay","Promise","resolve","setTimeout","then","fetch","response","json","PeoplePage","useState","error","setError","setPeople","isLoading","setIsLoading","useEffect","getPeople","catch","finally","normalizeName","toLowerCase","filterPeople","peopleLoaded","filteredPeople","length","Math","ceil","normalizedQuery","trim","sort","personOne","personTwo","localeCompare","reverse","Navbar","role","isActive","App","path","element","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.c386cb0d.chunk.js","sourcesContent":["export type SearchParams = {\n  [key: string]: string | string[] | null,\n};\n\n/**\n * This function prepares a correct search string\n * from a given currentParams and paramsToUpdate.\n */\nexport function getSearchWith(\n  currentParams: URLSearchParams,\n  paramsToUpdate: SearchParams, // it's our custom type\n): string {\n  // copy currentParams by creating new object from a string\n  const newParams = new URLSearchParams(\n    currentParams.toString(),\n  );\n\n  // Here is the example of paramsToUpdate\n  // {\n  //   sex: 'm',                ['sex', 'm']\n  //   order: null,             ['order', null]\n  //   centuries: ['16', '19'], ['centuries', ['16', '19']]\n  // }\n  //\n  // - params with the `null` value are deleted;\n  // - string value is set to given param key;\n  // - array of strings adds several params with the same key;\n\n  Object.entries(paramsToUpdate)\n    .forEach(([key, value]) => {\n      if (value === null) {\n        newParams.delete(key);\n      } else if (Array.isArray(value)) {\n        // we delete the key to remove old values\n        newParams.delete(key);\n\n        value.forEach(part => {\n          newParams.append(key, part);\n        });\n      } else {\n        newParams.set(key, value);\n      }\n    });\n\n  // we return a string to use it inside links\n  return newParams.toString();\n}\n","import { Link, LinkProps, useSearchParams } from 'react-router-dom';\nimport { getSearchWith, SearchParams } from '../utils/searchHelper';\n\n/**\n * To replace the the standard `Link` we take all it props except for `to`\n * along with the custom `params` prop that we use for updating the search\n */\ntype Props = Omit<LinkProps, 'to'> & {\n  params: SearchParams,\n};\n\n/**\n * SearchLink updates the given `params` in the search keeping the `pathname`\n * and the other existing search params (see `getSearchWith`)\n */\nexport const SearchLink: React.FC<Props> = ({\n  children, // this is the content between the open and closing tags\n  params, // the params to be updated in the `search`\n  ...props // all usual Link props like `className`, `style` and `id`\n}) => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <Link\n      // to={{ search: getSearchWith(searchParams, { query: 'sdf' }) }}\n      // to={{ search: getSearchWith(searchParams, { query: null }) }}\n      // to={{ search: getSearchWith(searchParams, { centuries: ['16', '18'] }) }}\n      to={{\n        search: getSearchWith(searchParams, params),\n      }}\n      {...props} // copy all the other props\n    >\n      {children}\n    </Link>\n  );\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport { useSearchParams } from 'react-router-dom';\nimport { SearchLink } from './SearchLink';\nimport { SearchParams, getSearchWith } from '../utils/searchHelper';\n\nconst centuriesForFiltering = ['16', '17', '18', '19', '20'];\n\nexport const PeopleFilters = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const centuries = searchParams.getAll('centuries') || [];\n  const sex = searchParams.get('sex') || '';\n  const query = searchParams.get('query') || '';\n\n  function setSearchWith(paramsToUpdate: SearchParams) {\n    const search = getSearchWith(searchParams, paramsToUpdate);\n\n    setSearchParams(search);\n  }\n\n  function handleQueryChange(event: React.ChangeEvent<HTMLInputElement>) {\n    setSearchWith({ query: event.target.value });\n  }\n\n  function onToggleCenturies(century: string) {\n    return centuries.includes(century)\n      ? centuries.filter(centuryNew => century !== centuryNew)\n      : [...centuries, century];\n  }\n\n  return (\n    <nav className=\"panel\">\n      <p className=\"panel-heading\">Filters</p>\n\n      <p className=\"panel-tabs\" data-cy=\"SexFilter\">\n        <SearchLink\n          className={classNames({\n            'is-active': sex === '',\n          })}\n          params={{ sex: null }}\n        >\n          All\n        </SearchLink>\n        <SearchLink\n          className={classNames({\n            'is-active': sex === 'm',\n          })}\n          params={{ sex: 'm' }}\n        >\n          Male\n        </SearchLink>\n        <SearchLink\n          className={classNames({\n            'is-active': sex === 'f',\n          })}\n          params={{ sex: 'f' }}\n        >\n          Female\n        </SearchLink>\n      </p>\n\n      <div className=\"panel-block\">\n        <p className=\"control has-icons-left\">\n          <input\n            data-cy=\"NameFilter\"\n            type=\"search\"\n            className=\"input\"\n            value={query}\n            onChange={handleQueryChange}\n            placeholder=\"Search\"\n          />\n\n          <span className=\"icon is-left\">\n            <i className=\"fas fa-search\" aria-hidden=\"true\" />\n          </span>\n        </p>\n      </div>\n\n      <div className=\"panel-block\">\n        <div className=\"level is-flex-grow-1 is-mobile\" data-cy=\"CenturyFilter\">\n          <div className=\"level-left\">\n            {centuriesForFiltering.map((century) => (\n              <SearchLink\n                key={century}\n                data-cy=\"century\"\n                className={classNames('button', 'mr-1', {\n                  'is-info': centuries.includes(century),\n                })}\n                params={{\n                  centuries: onToggleCenturies(century),\n                }}\n              >\n                {century}\n              </SearchLink>\n            ))}\n          </div>\n\n          <div className=\"level-right ml-4\">\n            <SearchLink\n              data-cy=\"centuryALL\"\n              className=\"button is-success is-outlined\"\n              params={{ centuries: null }}\n            >\n              All\n            </SearchLink>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"panel-block\">\n        <SearchLink\n          className=\"button is-link is-outlined is-fullwidth\"\n          params={{\n            centuries: null,\n            sex: null,\n            query: null,\n          }}\n        >\n          Reset all filters\n        </SearchLink>\n      </div>\n    </nav>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import classNames from 'classnames';\nimport { Link, useParams, useSearchParams } from 'react-router-dom';\nimport { Person } from '../types';\nimport { SearchLink } from './SearchLink';\n\ninterface Props {\n  people: Person[],\n}\n\nconst sortFields = ['Name', 'Sex', 'Born', 'Died'];\n\nexport const PeopleTable: React.FC<Props> = ({ people }) => {\n  const { personSlug } = useParams();\n  const [searchParams] = useSearchParams();\n  const sortField = searchParams.get('sortField') || '';\n  const sortOrder = searchParams.get('sortOrder') || '';\n\n  const handleClickSorting = (newSortField: string) => {\n    const isFirstClick = newSortField !== sortField;\n    const isSecondClick = newSortField === sortField && sortOrder !== 'desc';\n\n    if (isFirstClick) {\n      return {\n        sortField: newSortField,\n        sortOrder: null,\n      };\n    }\n\n    if (isSecondClick) {\n      return {\n        sortField: newSortField,\n        sortOrder: 'desc',\n      };\n    }\n\n    return {\n      sortField: null,\n      sortOrder: null,\n    };\n  };\n\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n      <thead>\n        <tr>\n          {sortFields.map((field) => (\n            <th>\n              <span className=\"is-flex is-flex-wrap-nowrap\">\n                {field}\n                <SearchLink params={handleClickSorting(field)}>\n                  <span className=\"icon\">\n                    <i className={classNames('fas', {\n                      'fa-sort': sortField !== field,\n                      'fa-sort-up': sortField === field && !sortOrder,\n                      'fa-sort-down': sortField === field\n                        && sortOrder === 'desc',\n                    })}\n                    />\n                  </span>\n                </SearchLink>\n              </span>\n            </th>\n          ))}\n\n          <th>Mother</th>\n          <th>Father</th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {people.map((person) => {\n          const mother = people.find(({ name }) => name === person.motherName);\n          const father = people.find(({ name }) => name === person.fatherName);\n\n          return (\n            <tr\n              data-cy=\"person\"\n              key={person.slug}\n              className={classNames({\n                'has-background-warning': person.slug === personSlug,\n              })}\n            >\n              <td>\n                <Link\n                  to={person.slug}\n                  className={classNames({\n                    'has-text-danger': person.sex === 'f',\n                  })}\n                >\n                  {person.name}\n                </Link>\n              </td>\n\n              <td>{person.sex}</td>\n              <td>{person.born}</td>\n              <td>{person.died}</td>\n\n              {mother ? (\n                <td>\n                  <Link to={mother?.slug} className=\"has-text-danger\">\n                    {person.motherName}\n                  </Link>\n                </td>\n              ) : (\n                <td>{person.motherName || '-'}</td>\n              )}\n\n              {father ? (\n                <td>\n                  <Link to={father?.slug}>{person.fatherName}</Link>\n                </td>\n              ) : (\n                <td>{person.fatherName || '-'}</td>\n              )}\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport async function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { PeopleFilters } from './PeopleFilters';\nimport { Loader } from './Loader';\nimport { PeopleTable } from './PeopleTable';\nimport { getPeople } from '../api';\nimport { Person } from '../types';\n\nexport const PeoplePage = () => {\n  const [error, setError] = useState('');\n  const [people, setPeople] = useState<Person[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [searchParams] = useSearchParams();\n  const centuries = searchParams.getAll('centuries') || [];\n  const sex = searchParams.get('sex') || '';\n  const query = searchParams.get('query') || '';\n  const sortField = searchParams.get('sortField') || '';\n  const sortOrder = searchParams.get('sortOrder') || '';\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    getPeople()\n      .then(setPeople)\n      .catch(() => {\n        setError('Something went wrong');\n      })\n      .finally(() => {\n        setIsLoading(false);\n      });\n  }, []);\n\n  const normalizeName = (name: string | null) => {\n    return name?.toLowerCase();\n  };\n\n  const filterPeople = (peopleLoaded: Person[]) => {\n    let filteredPeople = [...peopleLoaded];\n\n    if (centuries.length) {\n      filteredPeople = filteredPeople.filter(\n        (person) => centuries.includes(Math.ceil(person.born / 100).toString())\n          || centuries.includes(Math.ceil(person.born / 100).toString()),\n      );\n    }\n\n    if (sex) {\n      filteredPeople = filteredPeople.filter(person => person.sex === sex);\n    }\n\n    if (query) {\n      const normalizedQuery = query.toLowerCase().trim();\n\n      filteredPeople = filteredPeople\n        .filter(person => normalizeName(person.name)?.includes(normalizedQuery)\n          || normalizeName(person.motherName)?.includes(normalizedQuery)\n          || normalizeName(person.fatherName)?.includes(normalizedQuery));\n    }\n\n    if (sortField) {\n      filteredPeople = filteredPeople.sort((personOne, personTwo) => {\n        switch (sortField) {\n          case 'Name':\n            return personOne.name.localeCompare(personTwo.name);\n          case 'Sex':\n            return personOne.sex.localeCompare(personTwo.sex);\n          case 'Born':\n            return personOne.born - personTwo.born;\n          case 'Died':\n            return personOne.died - personTwo.died;\n          default:\n            return 0;\n        }\n      });\n    }\n\n    if (sortOrder === 'desc') {\n      filteredPeople = filteredPeople.reverse();\n    }\n\n    return filteredPeople;\n  };\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"block\">\n        <div className=\"columns is-desktop is-flex-direction-row-reverse\">\n          <div className=\"column is-7-tablet is-narrow-desktop\">\n            <PeopleFilters />\n          </div>\n\n          <div className=\"column\">\n            <div className=\"box table-container\">\n              {isLoading && <Loader />}\n\n              {error && (\n                <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n                  {error}\n                </p>\n              )}\n\n              {!error && !people.length && !isLoading && (\n                <p data-cy=\"noPeopleMessage\">\n                  There are no people on the server\n                </p>\n              )}\n\n              {!error && !isLoading && !!people.length\n                && !filterPeople(people).length\n                && (\n                  <p>\n                    There are no people matching the current search criteria\n                  </p>\n                )}\n\n              {!!filterPeople(people).length && (\n                <PeopleTable\n                  people={filterPeople(people)}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","import classNames from 'classnames';\nimport { NavLink } from 'react-router-dom';\n\nexport const Navbar = () => {\n  return (\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <NavLink\n            to=\"/\"\n            className={({ isActive }) => classNames('navbar-item', {\n              'has-background-grey-lighter': isActive,\n            })}\n          >\n            Home\n          </NavLink>\n\n          <NavLink\n            className={({ isActive }) => classNames('navbar-item', {\n              'has-background-grey-lighter': isActive,\n            })}\n            to=\"/people\"\n          >\n            People\n          </NavLink>\n        </div>\n      </div>\n    </nav>\n  );\n};\n","// import { PeoplePage } from './components/PeoplePage';\n// import { Navbar } from './components/Navbar';\n\n// import './App.scss';\n\n// export const App = () => {\n//   return (\n//     <div data-cy=\"app\">\n//       <Navbar />\n\n//       <div className=\"section\">\n//         <div className=\"container\">\n//           <h1 className=\"title\">Home Page</h1>\n//           <h1 className=\"title\">Page not found</h1>\n//           <PeoplePage />\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\nimport {\n  Navigate, Route, Routes,\n} from 'react-router-dom';\nimport './App.scss';\nimport { PeoplePage } from './components/PeoplePage';\nimport { Navbar } from './components/Navbar';\n\nexport const App = () => {\n  return (\n    <div data-cy=\"app\">\n      <Navbar />\n\n      <main className=\"section\">\n        <div className=\"container\">\n          <Routes>\n            <Route path=\"/\" element={<h1 className=\"title\">Home Page</h1>} />\n            <Route\n              path=\"*\"\n              element={<h1 className=\"title\">Page not found</h1>}\n            />\n            <Route path=\"/home\" element={<Navigate to=\"/\" />} />\n            <Route path=\"/people\" element={<PeoplePage />}>\n              <Route path=\":personSlug?\" />\n            </Route>\n          </Routes>\n        </div>\n      </main>\n    </div>\n  );\n};\n","import { createRoot } from 'react-dom/client';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { App } from './App';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Router>\n      <App />\n    </Router>,\n  );\n"],"sourceRoot":""}